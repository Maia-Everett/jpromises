apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.7
targetCompatibility = 1.7
group = 'org.lucidfox.jpromises'
version = '0.2.0-SNAPSHOT'

task wrapper(type: Wrapper) {
	gradleVersion = '3.5'
}

sourceSets {
	main {
		resources {
			exclude '**/.keep'
		}
	}

	gwt {
		java {
			srcDir 'src/main/java'
		}
		
		resources {
			srcDir 'src/main/resources'
			srcDir 'src/main/gwt'
			exclude '**/.keep'
		}
	}
}

jar {
	manifest {
		attributes 'Implementation-Title': 'JPromises', 'Implementation-Version': version
	}
}

javadoc {
	options.addStringOption('tag', 'apiNote:a:API Note:')
	// options.addStringOption('tag', 'implSpec:a:Implementation Requirements:')
    // options.addStringOption('tag', 'implNote:a:Implementation Note:')
}

repositories {
	jcenter()
}

dependencies {
	compileOnly group: 'com.google.gwt', name: 'gwt-user', version: '2.7.0'
	compileOnly group: 'com.google.android', name: 'android', version: '2.1.2'
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

test {
	testLogging {
		events 'passed', 'skipped', 'failed'
	}
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task gwtJar(type: Jar) {
	baseName = "${project.name}-gwt"
	from sourceSets.gwt.allSource
}

task gwtJavadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	baseName = "${project.name}-gwt"
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task gwtSourcesJar(type: Jar) {
	classifier = 'sources'
	baseName = "${project.name}-gwt"
	from sourceSets.gwt.allSource
}

artifacts {
	archives sourcesJar
	archives javadocJar
	archives gwtJar
	archives gwtJavadocJar
	archives gwtSourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
	repositories {
	   mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			
			repository(url: 'file:///home/maia/workspace/promises/jpromises/build/repo/')
			
			addFilter('default') {artifact, file ->
                artifact.name == "${project.name}"
            }
			
			addFilter('gwt') {artifact, file ->
                artifact.name == "${project.name}-gwt"
            }
		   
			pom('default').project {
				licenses {
					license {
						name 'MIT License'
						url 'http://www.opensource.org/licenses/mit-license.php'
						distribution 'repo'
					}
				}
				
				developers {
					developer {
						name 'Maia Everett'
						email 'maia@lucidfox.org'
						url 'http://lucidfox.org'
					}
				}
				
				scm {
					url 'https://github.com/lucidfox/jpromises'
					connection 'https://github.com/lucidfox/jpromises.git'
					developerConnection 'git@github.com:lucidfox/jpromises.git'
				}
				
				name 'Java Library for Promises'
				description 'An implementation of Promises in Java based on the JavaScript Promises/A+ specification,' +
					' with adapters for AWT and GWT.'
				url 'https://github.com/lucidfox/jpromises'
			}
		   
			pom('gwt').project {
				name 'Java Library for Promises - GWT module'
				description 'An implementation of Promises in Java based on the JavaScript Promises/A+ specification,' +
					' with adapters for AWT and GWT. This artifact contains a GWT module with packaged sources.'
				url 'https://github.com/lucidfox/jpromises'
			}
			
			pom('gwt').model.licenses = pom('default').model.licenses
			pom('gwt').model.developers = pom('default').model.developers
			pom('gwt').model.scm = pom('default').model.scm

        	pom('gwt').withXml {
        		// ugh, ugly
            	def dependency = asNode().get('dependencies')[0].appendNode('dependency')
            	dependency.appendNode('groupId', 'com.google.gwt')
      			dependency.appendNode('artifactId', 'gwt-user')
      			dependency.appendNode('version', '2.7.0')
      			dependency.appendNode('scope', 'provided')
      			
      			dependency = asNode().get('dependencies')[0].appendNode('dependency')
            	dependency.appendNode('groupId', "${project.group}")
      			dependency.appendNode('artifactId', "${project.name}")
      			dependency.appendNode('version', "${project.version}")
      			dependency.appendNode('scope', 'compile')
        	}
		}
	}
}
